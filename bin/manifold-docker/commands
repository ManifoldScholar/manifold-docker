#!/usr/bin/env bash

build() {
    if [[ -z ${1} ]]
    then
        local commands=("VERSION (x.x.x)")
        error_message "You must specify the version of Manifold to build."
        help_message ${FUNCNAME[0]} "${commands[@]}"
        exit 1
    fi
    standard_message "Building v${1} of Manifold and Proxy images"
    standard_message "Attempting to remove old manifold images..."
    docker image rm manifold_proxy
    docker image rm manifold_api
    _cleanup
    docker build --no-cache -t manifold_proxy -f ${proxy_dockerfile} .
    docker build --no-cache --build-arg MANIFOLD_VERSION=${1} -t manifold_api -f ${api_dockerfile} .
}

compose() {
    case "${1}" in
        up)
            _compose_up
            ;;
        down)
            _compose_down
            ;;
        run)
            if [[ -z ${2} ]]
            then
                local commands=("COMMAND")
                error_message "You must specify the command you wish compose to run."
                help_message "${FUNCNAME[0]} run" "${commands[@]}"
                exit 1
            fi
            _compose_run "${2}"
            ;;
        *)
            local commands=("up" "down" "run")
            help_message ${FUNCNAME[0]} "${commands[@]}"
    esac
}

_compose_up() {
    _pull_dependencies
    docker-compose -f ${docker_compose_file} up -d
    standard_message "Waiting for containers to come up..."
    # TODO Actually check status of containers
    sleep 60
    _compose_run "cd api && bin/rails db:migrate"
    _compose_help_message
}

_compose_down() {
    docker-compose -f ${docker_compose_file} down
}

_compose_run() {
    standard_message "Attempting to run: ${1}"
    docker-compose -f ${docker_compose_file} run api /bin/bash -c "${1}"
}

_compose_help_message() {
cat << ComposeHelpMessage
    Example API route: docker.manifold.lvh:4000/api/v1/projects
    Teardown command: ./manifold-docker compose down
ComposeHelpMessage
}

stack() {
    case "${1}" in
        up)
            _stack_up
            ;;
        down)
            _stack_down
            ;;
        run)
            if [[ -z ${2} ]]
            then
                local commands=("COMMAND")
                error_message "You must specify the command you wish to run on the stack."
                help_message "${FUNCNAME[0]} run" "${commands[@]}"
                exit 1
            fi
            _stack_run "${2}"
            ;;
        *)
            local commands=("up" "down" "run")
            help_message ${FUNCNAME[0]} "${commands[@]}"
    esac

}

_stack_up() {
    _pull_dependencies
    _stack_generate_config
    docker swarm init
    docker stack deploy -c ${docker_stack_file} manifold
    standard_message "Waiting for containers to come up..."
    # TODO Actually check status of containers
    sleep 60
    _stack_run  "cd api && bin/rails db:migrate"
    _stack_help_message
}

_stack_down(){
    docker stack rm manifold
    docker swarm leave --force
}

_stack_run() {
    standard_message "Attempting to run: ${1}"
    docker exec -ti manifold_api.1.$(docker service ps -f 'name=manifold_api.1' manifold_api -q) /bin/bash -c "${1}"
}

_stack_generate_config() {
    docker-compose -f ${docker_compose_file} -f ${docker_compose_override_file} config > ${docker_stack_file}
}
_stack_help_message() {
cat <<StackHelpMessage
    View stack: docker stack ls
    View containers: docker service ls
    Logs: docker logs CONTAINER
    Visualizer: http://localhost:8084
    Example API route: http://docker.manifold.lvh:4000/api/v1/projects
    Teardown command: ./manifold-docker stack down
StackHelpMessage
}

create_volumes() {
    docker volume create manifold_data
    docker volume create manifold_sockets
}

run_containers() {
    docker run -d -v manifold_data:/manifold_data -v manifold_sockets:/manifold_sockets manifold_api:latest
    docker run -d -p 4000:80 -v manifold_data:/manifold_data -v manifold_sockets:/manifold_sockets manifold_proxy:latest
}

# Private

_cleanup() {
    standard_message "Cleaning up stale volumes."
    docker volume prune
    standard_message "Cleaning up stale images."
    docker image prune
}

_container_is_running() {
#    IS_RUNNING=`docker-compose ps -q ${1}`
    docker-compose ps -q ${1}
#if [[ "$IS_RUNNING" != "" ]]; then
#    echo "The service is running!!!"
#fi
}
_pull_dependencies() {
    docker pull dockersamples/visualizer:stable
    docker pull postgres:alpine
    docker pull redis:alpine
    docker pull docker.elastic.co/elasticsearch/elasticsearch:6.1.3
}

_output() {
    echo -e "\n$1\n"
}


