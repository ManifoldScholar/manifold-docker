#!/usr/bin/env bash

_create_volumes() {
    docker volume create manifold_data
    docker volume create manifold_sockets
}

_run_containers() {
    docker run -d -v manifold_data:/manifold_data -v manifold_sockets:/manifold_sockets manifold_api:latest
    docker run -d -p 4000:80 -v manifold_data:/manifold_data -v manifold_sockets:/manifold_sockets manifold_proxy:latest
}

# Private

_create_docker_machine() {
    if [[ $OSTYPE = *"darwin"* ]]
    then
        case $(docker-machine status manifold1) in
            Stopped)
                docker-machine start manifold1
                ;;
            Running)
                ;;
            *)
                _output "To prevent a potential communication issue with the docker-machine, now attempting to bounce vboxnet0 network interface which requires sudo."
                _output "Please enter your password if prompted. (see above)"
                sudo ifconfig vboxnet0 down && sudo ifconfig vboxnet0 up
                docker-machine create --driver virtualbox --virtualbox-memory 4096 manifold1
        esac
        _output "Setting docker-machine environemnt to manifold1"
        eval $(docker-machine env manifold1)
        _output "Running sudo sysctl -w vm.max_map_count=262144 for ElasticSearch"
        docker-machine ssh manifold1 "sudo sysctl -w vm.max_map_count=262144"
    fi
}

_get_docker_ip() {
    if [[ $OSTYPE = *"darwin"* ]]
    then
        docker-machine ip manifold1
    else
        echo '127.0.0.1'
    fi
}

_get_docker_ip_or_domain() {
    if [ -z ${MANIFOLD_DOMAIN} ]
    then
        _get_docker_ip
    else
        echo ${MANIFOLD_DOMAIN}
    fi
}

_cleanup_images() {
    standard_message "Cleaning up stale images."
    docker image prune
}

_cleanup_volumes() {
    standard_message "Cleaning up stale volumes."
    docker volume prune
}

_wait_for_curl() {
    local url response
    local "${@}"
    until curl -k -s -o /dev/null -w %{http_code} ${url} | grep "${response}" >/dev/null;
    do
        sleep 5
        echo -n '.'
    done
}

_wait_for_docker_compose() {
    local container command response
    local "${@}"
    until docker-compose -f ${docker_compose_file} run ${container} /bin/bash -c "${command}" | grep "${response}" >/dev/null;
    do
        sleep 5
        echo -n '.'
    done
}

_wait_for_docker_exec() {
    local service command response
    local "${@}"
    until docker exec -ti ${service}.1.$(docker service ps -f "name=${service}.1" ${service} -q) /bin/bash -c "${command}" | grep "${response}" >/dev/null;
    do
        sleep 5
        echo -n '.'
    done
}

_wait_for_docker_container_logs() {
    local container response
    local "${@}"
    until docker container logs ${container} | grep "${response}" >/dev/null;
    do
        sleep 5
        echo -n '.'
    done
}

_wait_for_docker_service_logs() {
    local service response
    local "${@}"
    until docker service logs ${service} | grep "${response}" >/dev/null;
    do
        sleep 5
        echo -n '.'
    done
}

_pull_dependencies() {
    local manifold_tag
    local "${@}"
    docker pull dockersamples/visualizer:stable
    docker pull postgres:alpine
    docker pull redis:alpine
    docker pull docker.elastic.co/elasticsearch/elasticsearch:6.1.3
    docker pull manifoldscholar/manifold_api:${manifold_tag}
    docker pull manifoldscholar/manifold_proxy:${manifold_tag}
}

_output() {
    echo -e "\n$1\n"
}

__manifold_api_loading() {
    standard_message "Waiting for Manifold API (${manifold_tag})..."
    _wait_for_curl url="https://$(_get_docker_ip):4000/api/v1/projects" response=500
}
__manifold_client_loading() {
    local swarm_mode
    local "${@}"
    standard_message "Waiting for Manifold Client (${manifold_tag})..."
    case ${swarm_mode} in
        0)
            _wait_for_docker_container_logs container="compose_client_1"\
            response="Client server is listening"
            ;;
        1)
            _wait_for_docker_service_logs service="manifold_client"\
            response="Client server is listening"
            ;;
        *)
            error_message "swarm_mode must be set. Valid values: 0 or 1"
    esac

}
__postgres_loading() {
    local swarm_mode
    local "${@}"
    standard_message "Waiting for PostgreSQL..."
    case ${swarm_mode} in
        0)
            _wait_for_docker_compose container="postgres"\
            command="pg_isready -U postgres -h postgres"\
            response="accepting connections"
            ;;
        1)
            _wait_for_docker_exec service="manifold_postgres"\
            command="pg_isready -U postgres -h postgres"\
            response="accepting connections"
            ;;
        *)
            error_message "swarm_mode must be set. Valid values: 0 or 1"
    esac
}
