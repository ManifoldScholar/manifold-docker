#!/usr/bin/env bash

compose() {
    case "${1}" in
        up)
            if [[ -z ${2} ]]
            then
                local commands=("VERSION (x.x.x)")
                error_message "You must specify the version of Manifold."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            _compose_up manifold_tag=${2}
            ;;
        down)
            _compose_down
            ;;
        run)
            if [[ -z ${2} ]]
            then
                local commands=("CONTAINER")
                error_message "You must specify the container you wish compose to run on."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            if [[ -z ${3} ]]
            then
                local commands=("COMMAND")
                error_message "You must specify the command you wish compose to run on ${2}."
                help_message "${FUNCNAME[0]} ${1} ${2}" "${commands[@]}"
                exit 1
            fi
            _compose_run "${2}"
            ;;
        *)
            local commands=("up" "down" "run")
            help_message ${FUNCNAME[0]} "${commands[@]}"
    esac
}

_compose_up() {
    local manifold_tag
    local "${@}"
    export MANIFOLD_TAG=${manifold_tag} DOCKER_IP=$(_get_docker_ip)
    docker-compose -f ${docker_compose_file} up -d
    __manifold_api_loading
    __postgres_loading
    _compose_run container="api" command="cd api && bin/rails db:migrate"
    _compose_run container="api" command="cd api && rails manifold:user:create:admin['email@example.com','M@n1f0ld','First','Last']"
    __manifold_client_loading
    _compose_help_message
}

_compose_down() {
    docker-compose -f ${docker_compose_file} down -v
}

_compose_run() {
    local container command
    local "${@}"
    standard_message "Attempting to run: ${command} on ${container}"
    docker-compose -f ${docker_compose_file} run ${container} /bin/bash -c "${command}"
}

_compose_help_message() {
cat << ComposeHelpMessage

    Manifold:
        https://$(_get_docker_ip):4000/

    Admin User: email@example.com
    Admin Password: M@n1f0ld

    Setup additional admin user:
        eval \$(docker-machine env manifold1) # Required if running on macOS
        docker exec -it compose_api_1 /bin/bash -c "cd api && rails manifold:user:create:admin['email@example.com','M@n1f0ld','First','Last']"

    Example API route:
        https://$(_get_docker_ip):4000/api/v1/projects

    Teardown command:
        ./manifold-docker compose down

ComposeHelpMessage
}

__manifold_api_loading() {
    standard_message "Waiting for Manifold API (${manifold_tag})..."
    _wait_for_curl url="https://$(_get_docker_ip):4000/api/v1/projects" response=500
}
__manifold_client_loading() {
    standard_message "Waiting for Manifold Client (${manifold_tag})..."
    _wait_for_docker_container_logs container="compose_client_1" response="Client server is listening"
}
__postgres_loading() {
    standard_message "Waiting for PostgreSQL..."
    _wait_for_docker_compose container="postgres" command="pg_isready -U postgres -h postgres" response="accepting connections"
}