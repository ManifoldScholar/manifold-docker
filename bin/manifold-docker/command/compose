#!/usr/bin/env bash

compose() {
    case "${1}" in
        up)
            if [[ -z ${2} ]]
            then
                local commands=("VERSION (x.x.x)")
                error_message "You must specify the version of Manifold."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            MANIFOLD_DOMAIN=${3}
            _compose_up manifold_tag=${2}
            ;;
        down)
            _compose_down
            ;;
        run)
            if [[ -z ${2} ]]
            then
                local commands=("VERSION (x.x.x) CONTAINER")
                error_message "You must specify the version of Manifold."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            if [[ -z ${3} ]]
            then
                local commands=("CONTAINER")
                error_message "You must specify the container you wish compose to run on."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            export MANIFOLD_TAG=${2}
            _compose_run container="${3}" prompt=1
            ;;
        *)
            local commands=("up" "down" "run")
            help_message ${FUNCNAME[0]} "${commands[@]}"
    esac
}

_compose_up() {
    local manifold_tag
    local "${@}"
    export MANIFOLD_TAG=${manifold_tag} DOCKER_IP=$(_get_docker_ip) DOCKER_IP_OR_DOMAIN=$(_get_docker_ip_or_domain)
    docker-compose -f ${docker_compose_file} up -d
    __manifold_api_loading
    __postgres_loading swarm_mode=0
    _compose_run container="api" command="cd api && bin/rails db:migrate" prompt=0
    _compose_run container="api" command="cd api && bin/rails db:seed" prompt=0
    _compose_run container="api" \
    command="cd api && rails manifold:user:create:admin['email@example.com','M@n1f0ld','First','Last']" prompt=0
    __manifold_client_loading swarm_mode=0
    _compose_help_message
}

_compose_down() {
    docker-compose -f ${docker_compose_file} down -v
}

_compose_run() {
    local container command prompt
    local "${@}"
    if [ ${prompt} == 1 ]
    then
        standard_message "Container set to [${container}]. What command would you like to run?"
        read command
    fi
    standard_message "Attempting to run: ${command} on ${container}"
    docker-compose -f ${docker_compose_file} run ${container} /bin/bash -c "${command}"
}

_compose_help_message() {
cat << ComposeHelpMessage

    Manifold:
        https://$(_get_docker_ip_or_domain):4000/

    Admin User: email@example.com
    Admin Password: M@n1f0ld

    Setup additional admin user:
        eval \$(docker-machine env manifold1) # Required if running on macOS
        docker exec -it compose_api_1 /bin/bash -c "cd api && rails manifold:user:create:admin['email@example.com','M@n1f0ld','First','Last']"

    Example API route:
        https://$(_get_docker_ip_or_domain):4000/api/v1/projects

    Teardown command:
        ./manifold-docker compose down

ComposeHelpMessage
}
