#!/usr/bin/env bash

stack() {
    case "${1}" in
        up)
            if [[ -z ${2} ]]
            then
                local commands=("VERSION (x.x.x)")
                error_message "You must specify the version of Manifold."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            _stack_up manifold_tag=${2}
            ;;
        down)
            _stack_down
            ;;
        run)
            if [[ -z ${2} ]]
            then
                local commands=("COMMAND")
                error_message "You must specify the command you wish to run on the stack."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            _stack_run container="manifold_api" command="${2}"
            ;;
        *)
            local commands=("up" "down" "run")
            help_message ${FUNCNAME[0]} "${commands[@]}"
    esac

}

_stack_up() {
    local manifold_tag
    local "${@}"
    export MANIFOLD_TAG=${manifold_tag}
    _stack_generate_config
    docker swarm init --advertise-addr $(_get_docker_machine_ip)
    docker-compose -f ${docker_stack_file} pull
    docker stack deploy -c ${docker_stack_file} manifold

    standard_message "Waiting for Manifold API (${manifold_tag})..."
    _wait_for_curl url="http://$(_get_docker_machine_ip):4000/api/v1/projects" response=500
    standard_message "Waiting for PostgreSQL..."
    _wait_for_docker_exec service="manifold_postgres" command="pg_isready -U postgres -h postgres" response="accepting connections"
    _stack_run  service="manifold_api" command="cd api && bin/rails db:migrate"
    _stack_help_message
}

_stack_down(){
    docker stack rm manifold
    docker swarm leave --force
}

_stack_run() {
    local service command
    local "${@}"
    standard_message "Attempting to run: ${command} on ${service}"
    docker exec -ti ${service}.1.$(docker service ps -f "name=${service}.1" ${service} -q) /bin/bash -c "${command}"
}

_stack_generate_config() {
    export MANIFOLD_TAG=${manifold_tag}; docker-compose -f ${docker_compose_file} -f ${docker_compose_override_file} config > ${docker_stack_file}
}
_stack_help_message() {
cat <<StackHelpMessage
    View stack: docker stack ls
    View containers: docker service ls
    Logs: docker logs CONTAINER
    Visualizer: http://$(_get_docker_machine_ip):8084
    Example API route: http://$(_get_docker_machine_ip):4000/api/v1/projects
    Teardown command: ./manifold-docker stack down
StackHelpMessage
}