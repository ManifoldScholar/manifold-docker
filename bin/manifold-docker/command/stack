#!/usr/bin/env bash

stack() {
    case "${1}" in
        up)
            if [[ -z ${2} ]]
            then
                local commands=("VERSION (x.x.x)")
                error_message "You must specify the version of Manifold."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            _stack_up manifold_tag=${2}
            ;;
        down)
            _stack_down
            ;;
        run)
            if [[ -z ${2} ]]
            then
                local commands=("COMMAND")
                error_message "You must specify the command you wish to run on the stack."
                help_message "${FUNCNAME[0]} ${1}" "${commands[@]}"
                exit 1
            fi
            _stack_run container="manifold_api" command="${2}"
            ;;
        *)
            local commands=("up" "down" "run")
            help_message ${FUNCNAME[0]} "${commands[@]}"
    esac

}

_stack_up() {
    local manifold_tag
    local "${@}"
    export MANIFOLD_TAG=${manifold_tag} DOCKER_IP=$(_get_docker_ip)
    _stack_generate_config
    docker swarm init --advertise-addr $(_get_docker_ip)
    docker-compose -f ${docker_stack_file} pull
    docker stack deploy -c ${docker_stack_file} manifold
    __manifold_api_loading swarm_mode=true
    __postgres_loading swarm_mode=true
    _stack_run service="manifold_api" command="cd api && bin/rails db:migrate"
    _stack_run service="manifold_api" command="cd api && rails manifold:user:create:admin['email@example.com','M@n1f0ld','First','Last']"
    _stack_help_message
}

_stack_down(){
    docker stack rm manifold
    docker swarm leave --force
}

_stack_run() {
    local service command
    local "${@}"
    standard_message "Attempting to run: ${command} on ${service}"
    docker exec -ti ${service}.1.$(docker service ps -f "name=${service}.1" ${service} -q) /bin/bash -c "${command}"
}

_stack_generate_config() {
    docker-compose -f ${docker_compose_file} -f ${docker_compose_override_file} config > ${docker_stack_file}
}
_stack_help_message() {
cat <<StackHelpMessage

    Manifold:
        https://$(_get_docker_ip):4000/

    Admin User: email@example.com
    Admin Password: M@n1f0ld

    Setup additional admin user:
        eval \$(docker-machine env manifold1) # Required if running on macOS
        docker exec -it compose_api_1 /bin/bash -c "cd api && rails manifold:user:create:admin['email@example.com','M@n1f0ld','First','Last']"

    Visualizer:
        http://$(_get_docker_ip):8084
    Example API route:
        https://$(_get_docker_ip):4000/api/v1/projects

    Teardown command:
        ./manifold-docker stack down
StackHelpMessage
}